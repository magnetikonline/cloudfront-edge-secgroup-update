AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFront edge security group update Lambda task"

Parameters:
  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "cloudfront-edge-security-group-update"

  ingressPortList:
    Type: "String"
    AllowedValues:
      - "443"
      - "80"
      - "80,443"
    Default: "443"

  securityGroupIdList:
    Type: "List<AWS::EC2::SecurityGroup::Id>"

  # note: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
  executeSchedule:
    Type: "String"
    AllowedPattern: "^(cron|rate)\\([^\\)]+\\)$"
    Default: "cron(0 0,6 * * ? *)" # run twice daily

  slackWebhookURI:
    Type: "String"
    AllowedPattern: "^(|https://hooks.slack.com/services/[A-Z0-9]{9}/[A-Z0-9]{9}/[A-Za-z0-9/]{24})$"
    Default: ""
    NoEcho: True

  slackChannel:
    Type: "String"
    AllowedPattern: "^(|[a-z0-9_-]+)$"
    Default: ""

  slackEmoji:
    Type: "String"
    AllowedPattern: "^(|[a-z0-9_-]+)$"
    Default: ""

  slackUsername:
    Type: "String"
    AllowedPattern: "^(|[a-zA-Z0-9- ]+)$"
    Default: ""

Resources:
  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          %%SMUSH_FUNCTION%%
      Description: "Update nominated security group ingress rules to that of CloudFront edge CIDR ranges"
      Environment:
        Variables:
          INGRESS_PORT_LIST: !Ref "ingressPortList"
          SECURITY_GROUP_ID_LIST: !Join [',',!Ref "securityGroupIdList"]
          SLACK_WEBHOOK_URI: !Ref "slackWebhookURI"
          SLACK_CHANNEL: !Ref "slackChannel"
          SLACK_EMOJI: !Ref "slackEmoji"
          SLACK_USERNAME: !Ref "slackUsername"
      FunctionName: !Ref "lambdaFunctionName"
      Handler: "index.handler"
      MemorySize: 128
      ReservedConcurrentExecutions: 1
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python2.7"
      Timeout: 10

  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
              - Action:
                  - "ec2:DescribeSecurityGroups"
                Effect: "Allow"
                Resource:
                  - "*"
              - Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:RevokeSecurityGroupIngress"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*"
          PolicyName: "lambda"

  lambdaPermissionInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt "lambdaScheduledTask.Arn"

  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 90

  lambdaScheduledTask:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Push CloudFront edge CIDR ranges to nominated security groups"
      ScheduleExpression: !Ref "executeSchedule"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt "lambdaFunction.Arn"
          Id: !Sub "${lambdaFunctionName}-invoke"

Outputs:
  lambdaArn:
    Value: !GetAtt "lambdaFunction.Arn"
