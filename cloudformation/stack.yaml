AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFront edge security group update Lambda task"

Parameters:
  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "cloudfront-edge-security-group-update"

  ingressPortList:
    Type: "String"
    AllowedValues:
      - "443"
      - "80"
      - "80,443"
    Default: "443"

  securityGroupIdList:
    Type: "List<AWS::EC2::SecurityGroup::Id>"

  # note: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
  executeSchedule:
    Type: "String"
    AllowedPattern: "^(cron|rate)\\([^\\)]+\\)$"
    Default: "cron(0 0,6 * * ? *)" # run twice daily

  slackWebhookURI:
    Type: "String"
    AllowedPattern: "^(|https://hooks.slack.com/services/[A-Z0-9]{9}/[A-Z0-9]{9}/[A-Za-z0-9/]{24})$"
    Default: ""
    NoEcho: True

  slackChannel:
    Type: "String"
    AllowedPattern: "^(|[a-z0-9_-]+)$"
    Default: ""

  slackEmoji:
    Type: "String"
    AllowedPattern: "^(|[a-z0-9_-]+)$"
    Default: ""

  slackUsername:
    Type: "String"
    AllowedPattern: "^(|[a-zA-Z0-9- ]+)$"
    Default: ""

Resources:
  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import base64,imp,tempfile,zlib
          _='''\
          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\
          '''
          l=tempfile.mkdtemp()+'/l.py'
          h=open(l,'w')
          h.write(zlib.decompress(base64.b64decode(_)))
          h.close()
          m=imp.load_source('l',l)
          def handler(e,c):
          	return m.handler(e,c)
      Description: "Update nominated security group ingress rules to that of CloudFront edge CIDR ranges"
      Environment:
        Variables:
          INGRESS_PORT_LIST: !Ref "ingressPortList"
          SECURITY_GROUP_ID_LIST: !Join [',',!Ref "securityGroupIdList"]
          SLACK_WEBHOOK_URI: !Ref "slackWebhookURI"
          SLACK_CHANNEL: !Ref "slackChannel"
          SLACK_EMOJI: !Ref "slackEmoji"
          SLACK_USERNAME: !Ref "slackUsername"
      FunctionName: !Ref "lambdaFunctionName"
      Handler: "index.handler"
      MemorySize: 128
      ReservedConcurrentExecutions: 1
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python2.7"
      Timeout: 10

  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
              - Action:
                  - "ec2:DescribeSecurityGroups"
                Effect: "Allow"
                Resource:
                  - "*"
              - Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:RevokeSecurityGroupIngress"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*"
          PolicyName: "lambda"

  lambdaPermissionInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt "lambdaScheduledTask.Arn"

  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 90

  lambdaScheduledTask:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Push CloudFront edge CIDR ranges to nominated security groups"
      ScheduleExpression: !Ref "executeSchedule"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt "lambdaFunction.Arn"
          Id: !Sub "${lambdaFunctionName}-invoke"

Outputs:
  lambdaArn:
    Value: !GetAtt "lambdaFunction.Arn"
