AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFront edge security group update Lambda task"

Parameters:
  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "cloudfront-edge-security-group-update"

  ingressPortList:
    Type: "String"
    AllowedValues:
      - "443"
      - "80"
      - "80,443"
    Default: "443"

  securityGroupIdList:
    Type: "List<AWS::EC2::SecurityGroup::Id>"

  # note: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
  executeSchedule:
    Type: "String"
    AllowedPattern: "^(cron|rate)\\([^\\)]+\\)$"
    Default: "cron(0 0,6 * * ? *)" # run twice daily

  slackWebhookURI:
    Type: "String"
    AllowedPattern: "^(|https://hooks.slack.com/services/[A-Z0-9]{9}/[A-Z0-9]{9}/[A-Za-z0-9/]{24})$"
    Default: ""
    NoEcho: True

  slackChannel:
    Type: "String"
    AllowedPattern: "^(|[a-z0-9_-]+)$"
    Default: ""

  slackEmoji:
    Type: "String"
    AllowedPattern: "^(|[a-z0-9_-]+)$"
    Default: ""

  slackUsername:
    Type: "String"
    AllowedPattern: "^(|[a-zA-Z0-9- ]+)$"
    Default: ""

Resources:
  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import base64,imp,tempfile,zlib
          _='''\
          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
          RUwjfj8pbVWE5fzfT1vuWqP/ANPvaY4=\
          '''
          l=tempfile.mkdtemp()+'/l.py'
          h=open(l,'w')
          h.write(zlib.decompress(base64.b64decode(_)))
          h.close()
          m=imp.load_source('l',l)
          def handler(e,c):
          	return m.handler(e,c)
      Description: "Update nominated security group ingress rules to that of CloudFront edge CIDR ranges"
      Environment:
        Variables:
          INGRESS_PORT_LIST: !Ref "ingressPortList"
          SECURITY_GROUP_ID_LIST: !Join [',',!Ref "securityGroupIdList"]
          SLACK_WEBHOOK_URI: !Ref "slackWebhookURI"
          SLACK_CHANNEL: !Ref "slackChannel"
          SLACK_EMOJI: !Ref "slackEmoji"
          SLACK_USERNAME: !Ref "slackUsername"
      FunctionName: !Ref "lambdaFunctionName"
      Handler: "index.handler"
      MemorySize: 128
      ReservedConcurrentExecutions: 1
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "python2.7"
      Timeout: 10

  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
              - Action:
                  - "ec2:DescribeSecurityGroups"
                Effect: "Allow"
                Resource:
                  - "*"
              - Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:RevokeSecurityGroupIngress"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*"
          PolicyName: "lambda"

  lambdaPermissionInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt "lambdaScheduledTask.Arn"

  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 90

  lambdaScheduledTask:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Push CloudFront edge CIDR ranges to nominated security groups"
      ScheduleExpression: !Ref "executeSchedule"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt "lambdaFunction.Arn"
          Id: !Sub "${lambdaFunctionName}-invoke"

Outputs:
  lambdaArn:
    Value: !GetAtt "lambdaFunction.Arn"
